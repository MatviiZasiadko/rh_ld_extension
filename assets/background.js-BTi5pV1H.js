const C=(o,s,e)=>{const n=e?`
**Search Parameters:**
• Country: ${e.country||"Not specified"}
• City: ${e.city||"Not specified"}
• Industry: ${e.industry||"Not specified"}
• Company Size: ${e.companySize||"Not specified"}
• Page: ${e.pagination||"1"}
  `:"";return{content:`**<@&1245715744130334772>** 
# New search result from \`${s}\`${n}`,embeds:[{color:16748288,fields:o.map(r=>({name:r.company_name,value:r.company_linkedin})),timestamp:new Date().toISOString()}],username:"Linkedin Extension"}};async function k(o){try{const s=await fetch("https://discord.com/api/webhooks/1245720887219585125/_wG7CWAQnmQE_P_QpIV-OJEwsB93rDHmh9jkHuj3OW6T7mwEuAtJ_YYQgzmSgluV-qr2",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!s.ok){const e=await s.json();console.error(s,e)}}catch(s){console.error(s)}}const f=(o,s)=>{console.log("companiesArray",o);const e=o.map(t=>({...t,verification_status:"unverified"}));chrome.storage.local.set({unverifiedCompanies:e});const n=p(o,2);console.log("chunks",n);let r=0;const c=[],i=[...e],d=t=>{const l=new FormData;return l.append("companies",JSON.stringify(t)),fetch("https://crm-s.com/api/v1/lead/get-unique-companies",{method:"POST",headers:{Authorization:`Bearer ${s}`},body:l}).then(a=>a.json()).then(a=>(r++,console.log("Resolved count:",r),a.data.forEach(u=>{u.is_unique===!0&&c.push({...u,verification_status:"verified"});const m=i.findIndex(h=>h.company_linkedin===u.company_linkedin);m!==-1&&i.splice(m,1)}),g(r,n.length,c,i),a)).catch(a=>(console.error("Error fetching chunk:",t,a),r++,g(r,n.length,c,i),{data:[]}))},g=(t,l,a,u)=>{const m=t===l;chrome.storage.local.set({requestData:{resolvedCount:t,totalChunks:l,processingComplete:m},companiesArray:a,unverifiedCompanies:u},function(){chrome.storage.local.get(["requestData"],function(h){console.log("requestData",h.requestData)})})},y=n.map(t=>d(t));return Promise.all(y).then(()=>{console.log("All chunks processed"),console.log("uniqueCompanies",c),console.log("unverifiedCompanies",i),chrome.storage.local.get("userName",async function(t){if(console.log("userName",t.userName),chrome.storage.local.set({requestData:{resolvedCount:n.length,totalChunks:n.length,processingComplete:!0}}),c.length>0&&t.userName){const l=p(c,20);chrome.storage.local.get("initSearchValues",async function(a){const u=a.initSearchValues||null;for(const m of l)await k(C(m,t.userName,u));chrome.tabs.create({url:chrome.runtime.getURL("src/results/index.html")})})}else c.length===0&&i.length>0?(chrome.tabs.create({url:chrome.runtime.getURL("src/results/index.html")}),t.userName||chrome.storage.local.set({error:"User name not found. Try again"})):c.length===0&&i.length===0?chrome.storage.local.set({error:"No unique companies found"}):t.userName||chrome.storage.local.set({error:"User name not found. Try again"})})}).catch(t=>{console.error("Error in Promise.all:",t),chrome.storage.local.set({error:"Error processing results. Try again"})})},p=(o,s)=>{const e=[];for(let n=0;n<o.length;n+=s)e.push(o.slice(n,n+s));return e};chrome.runtime.onMessage.addListener(function(o,s,e){if(o.action==="companiesArray")return console.log(JSON.stringify(o.companiesArray)),f(o.companiesArray,o.accessToken).then(()=>{e({success:!0})}).catch(n=>{e({success:!1,error:n})}),!0;if(o.action==="retryVerification")return console.log("Retrying verification for:",o.companies),chrome.storage.local.get("accessToken",function(n){const r=n.accessToken;r&&r.trim()!==""?f(o.companies,r).then(()=>{e({success:!0})}).catch(c=>{e({success:!1,error:c})}):e({success:!1,error:"Access token is missing or empty."})}),!0});
